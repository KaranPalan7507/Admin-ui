{"version":3,"sources":["components/Table/index.js","components/Pagination/index.js","components/UserEditModal/index.js","pages/user/index.js","api/getUserList.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","data","keys","columns","onDelete","onEdit","onRecordSelectionChange","onSelectAllChange","selectedRecords","selectAll","className","type","checked","onChange","e","target","map","column","item","rowData","id","key","onClick","icon","faPencilAlt","faTrashAlt","Pagination","total","perPageRecords","onPageChange","currentPage","noOfPages","Math","ceil","disabled","faAngleDoubleLeft","faChevronLeft","buttons","i","push","renderPageNos","faChevronRight","faAngleDoubleRight","UserEditModal","isOpen","onClose","onSubmit","onCloseModal","open","center","event","checkValidity","preventDefault","formData","FormData","dataObj","entries","value","htmlFor","name","defaultValue","required","email","selected","hidden","role","User","useState","list","setList","filteredList","setFilteredList","currentPageData","setCurrentPageData","setCurrentPage","editUserData","setEditUserData","searchText","setSearchText","setSelectedRecords","setSelectAll","filterData","filter","toLowerCase","indexOf","useEffect","mounted","axios","get","then","items","startIndex","endIndex","slice","placeholder","length","deleteItem","afterDeleteList","editItem","Object","records","pageNo","editIndex","findIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd898bd4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n//table component\r\nexport default function Table(props) {\r\n  //props passed to this component\r\n  const {\r\n    data,\r\n    keys,\r\n    columns,\r\n    onDelete,\r\n    onEdit,\r\n    onRecordSelectionChange,\r\n    onSelectAllChange,\r\n    selectedRecords,\r\n    selectAll,\r\n  } = props;\r\n  // rener Table Header\r\n  function renderHeaders() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th className=\"checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={selectAll}\r\n              onChange={(e) => onSelectAllChange(e.target.checked)}\r\n            />\r\n          </th>\r\n          {columns.map((column) => (\r\n            <th key={column} className={column}>\r\n              {column}\r\n            </th>\r\n          ))}\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n\r\n  //function to render row\r\n  function renderRow(rowData) {\r\n    return (\r\n      <tr\r\n        key={rowData.id}\r\n        className={selectedRecords[rowData.id] ? \"row-selected row\" : \"row\"}\r\n      >\r\n        <td className=\"checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedRecords[rowData.id] || false}\r\n            onChange={(e) =>\r\n              onRecordSelectionChange(rowData.id, e.target.checked)\r\n            }\r\n          />\r\n        </td>\r\n\r\n        {keys.map((key) => (\r\n          <td className={key} key={rowData[key]}>\r\n            {rowData[key]}\r\n          </td>\r\n        ))}\r\n        <td>\r\n          <button\r\n            onClick={() => onEdit(rowData)}\r\n            className=\"action-btn edit-btn\"\r\n          >\r\n            <FontAwesomeIcon icon={faPencilAlt} />\r\n          </button>\r\n          <button\r\n            onClick={() => onDelete(rowData)}\r\n            className=\"action-btn delete-btn\"\r\n          >\r\n            <FontAwesomeIcon icon={faTrashAlt} />\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  //render table component\r\n  return (\r\n    <>\r\n      <table>\r\n        {renderHeaders()}\r\n        <tbody>{data.map((item) => renderRow(item))}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {\r\n  faChevronLeft,\r\n  faChevronRight,\r\n  faAngleDoubleLeft,\r\n  faAngleDoubleRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//pagination component\r\nexport default function Pagination(props) {\r\n  //props passed to this component\r\n  const { total, perPageRecords, onPageChange, currentPage } = props;\r\n  //logic to calculate no of pages\r\n  const noOfPages = Math.ceil(total / perPageRecords);\r\n\r\n  //render page no buttons\r\n  function renderPageNos() {\r\n    let buttons = [];\r\n    for (let i = 1; i < noOfPages + 1; i++) {\r\n      buttons.push(\r\n        <button\r\n          key={i}\r\n          onClick={() => onPageChange(i)}\r\n          className={\r\n            currentPage === i\r\n              ? \"pagination-button current-pagination-button\"\r\n              : \"pagination-button\"\r\n          }\r\n        >\r\n          {i}\r\n        </button>\r\n      );\r\n    }\r\n    return buttons;\r\n  }\r\n  //render pagination component\r\n  return (\r\n    <div className=\"pagination\">\r\n      <button\r\n        onClick={() => onPageChange(1)}\r\n        disabled={currentPage === 1}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleDoubleLeft} />\r\n      </button>\r\n      <button\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faChevronLeft} />\r\n      </button>\r\n      {renderPageNos()}\r\n      <button\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === noOfPages}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faChevronRight} />\r\n      </button>\r\n      <button\r\n        onClick={() => onPageChange(noOfPages)}\r\n        disabled={currentPage === noOfPages}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleDoubleRight} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nexport default function UserEditModal(props) {\r\n  //props passed to this component\r\n  const { isOpen, onClose, onSubmit, data = {} } = props;\r\n  //after close function\r\n  function onCloseModal() {\r\n    onClose();\r\n  }\r\n  //on form submit update user details\r\n  const submit = (event) => {\r\n    if (!event.target.checkValidity()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const formData = new FormData(event.target);\r\n    const dataObj = { ...data };\r\n    for (let [key, value] of formData.entries()) {\r\n      dataObj[key] = value;\r\n    }\r\n    onSubmit(dataObj);\r\n    onCloseModal();\r\n  };\r\n\r\n  // render edit user form modal\r\n  return (\r\n    <Modal open={isOpen} onClose={onCloseModal} center>\r\n      <h2>Edit User</h2>\r\n      <form onSubmit={submit}>\r\n        <div>\r\n          <label htmlFor=\"name\">Name</label>\r\n          <input\r\n            name=\"name\"\r\n            id=\"name\"\r\n            type=\"text\"\r\n            defaultValue={data?.name}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            name=\"email\"\r\n            id=\"email\"\r\n            type=\"text\"\r\n            defaultValue={data?.email}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"role\">Role</label>\r\n          <select name=\"role\" id=\"role\">\r\n            <option value=\"none\" selected disabled hidden>\r\n              Select an Option\r\n            </option>\r\n\r\n            <option\r\n              value=\"admin\"\r\n              selected={data?.role === \"admin\" ? \"selected\" : \"\"}\r\n            >\r\n              admin\r\n            </option>\r\n            <option\r\n              value=\"member\"\r\n              selected={data?.role === \"member\" ? \"selected\" : \"\"}\r\n            >\r\n              member\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getUserList } from \"./../../api/getUserList\";\r\nimport Table from \"./../../components/Table\";\r\nimport Pagination from \"./../../components/Pagination\";\r\nimport UserEditModal from \"./../../components/UserEditModal\";\r\nimport \"./style.css\";\r\n// user component\r\nexport default function User() {\r\n  // state values\r\n  const [list, setList] = useState(null);\r\n  const [filteredList, setFilteredList] = useState([]);\r\n  const [currentPageData, setCurrentPageData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [editUserData, setEditUserData] = useState(null);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [selectedRecords, setSelectedRecords] = useState({});\r\n  const [selectAll, setSelectAll] = useState(false);\r\n\r\n  //component variables\r\n  const columns = [\"Name\", \"Email\", \"Role\"];\r\n  const keys = [\"name\", \"email\", \"role\"];\r\n  const perPageRecords = 10;\r\n  // hook - useefect - get user data on component load\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    getUserList().then((items) => {\r\n      if (mounted) {\r\n        setList(items.data);\r\n        setFilteredList([...items.data]);\r\n      }\r\n    });\r\n    return () => (mounted = false);\r\n  }, []);\r\n\r\n  // hook - use effect -  get filter data n list value change\r\n  useEffect(() => {\r\n    if (list) {\r\n      filterData();\r\n    }\r\n  }, [list]);\r\n\r\n  // hook - use effect -  get current page data on page change\r\n  useEffect(() => {\r\n    const startIndex = (currentPage - 1) * perPageRecords;\r\n    const endIndex = startIndex + perPageRecords;\r\n    const currentPageData = filteredList.slice(startIndex, endIndex);\r\n    setCurrentPageData(currentPageData);\r\n    setSelectAll(false);\r\n    setSelectedRecords({});\r\n  }, [currentPage, filteredList]);\r\n\r\n  // filter data based on user input\r\n  function filterData(searchText = \"\") {\r\n    setSearchText(searchText);\r\n    const filteredList = list.filter(function (item) {\r\n      for (var key in item) {\r\n        if (item[key].toLowerCase().indexOf(searchText.toLowerCase()) > -1)\r\n          return item;\r\n      }\r\n    });\r\n    setFilteredList(filteredList);\r\n  }\r\n\r\n  // on page change from pagination\r\n  function onPageChange(pageNo) {\r\n    setCurrentPage(pageNo);\r\n  }\r\n\r\n  // handle delete individual user\r\n  function onDelete(deleteItem) {\r\n    const afterDeleteList = list.filter((item) => item.id !== deleteItem.id);\r\n    setList(afterDeleteList);\r\n    if (currentPageData.length === 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  }\r\n\r\n  //on edit user click\r\n  function onEdit(editItem) {\r\n    setEditUserData(editItem);\r\n  }\r\n\r\n  // save updated user details\r\n  function updateUser(data) {\r\n    const editIndex = list.findIndex((item) => item.id === data.id);\r\n    list[editIndex] = data;\r\n    setList(list);\r\n    filterData(searchText);\r\n  }\r\n\r\n  //detele multiple users\r\n  function deleteUsers() {\r\n    const afterDeleteList = list.filter((item) => !selectedRecords[item.id]);\r\n    setList(afterDeleteList);\r\n    setSelectedRecords({});\r\n    if (Object.keys(selectedRecords).length === currentPageData.length) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n    setSelectAll(false);\r\n  }\r\n\r\n  //handle select all selection change\r\n  function onSelectAllChange(checked) {\r\n    const records = {};\r\n    if (checked) {\r\n      for (let item of currentPageData) {\r\n        records[item.id] = checked;\r\n      }\r\n    }\r\n    setSelectedRecords(records);\r\n\r\n    setSelectAll(checked);\r\n  }\r\n\r\n  // handle row selection change\r\n  function onRecordSelectionChange(id, checked) {\r\n    if (checked) {\r\n      selectedRecords[id] = checked;\r\n    } else {\r\n      delete selectedRecords[id];\r\n    }\r\n    setSelectedRecords({ ...selectedRecords });\r\n    setSelectAll(\r\n      Object.keys(selectedRecords).length === currentPageData.length\r\n    );\r\n  }\r\n\r\n  //render loading while api call is going on\r\n  if (list === null) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  // render user component\r\n  return (\r\n    <>\r\n      <h2>User List</h2>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => filterData(e.target.value)}\r\n        placeholder=\"Search by Name, Email or Role\"\r\n        className=\"search-text-box\"\r\n      />\r\n      {list.length === 0 || filteredList.length === 0 ? (\r\n        <div>No Data</div>\r\n      ) : (\r\n        <>\r\n          <Table\r\n            data={currentPageData}\r\n            columns={columns}\r\n            keys={keys}\r\n            onDelete={onDelete}\r\n            onEdit={onEdit}\r\n            onRecordSelectionChange={onRecordSelectionChange}\r\n            onSelectAllChange={onSelectAllChange}\r\n            selectedRecords={selectedRecords}\r\n            selectAll={selectAll}\r\n          />\r\n          <Pagination\r\n            perPageRecords={perPageRecords}\r\n            total={filteredList.length}\r\n            onPageChange={onPageChange}\r\n            currentPage={currentPage}\r\n          />\r\n          <UserEditModal\r\n            isOpen={!!editUserData}\r\n            onClose={() => setEditUserData(false)}\r\n            onSubmit={updateUser}\r\n            data={editUserData}\r\n          />\r\n          {Object.keys(selectedRecords).length ? (\r\n            <button onClick={deleteUsers} className=\"delete-selected-btn\">\r\n              Delete Selected\r\n            </button>\r\n          ) : null}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n//api call to get user list\r\nexport function getUserList() {\r\n  return axios\r\n    .get(\r\n      \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\"\r\n    )\r\n    .then((data) => data);\r\n}\r\n","import User from \"./pages/user\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <User />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}