{"version":3,"sources":["components/Table/index.js","components/Pagination/index.js","components/UserEditModal/index.js","components/UserAddModal/index.js","pages/user/index.js","api/getUserList.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","data","keys","columns","onDelete","onEdit","onRecordSelectionChange","onSelectAllChange","selectedRecords","selectAll","onSort","className","type","checked","onChange","e","target","map","column","index","onClick","item","rowData","id","key","icon","faPencilAlt","faTrashAlt","Pagination","total","perPageRecords","onPageChange","currentPage","noOfPages","Math","ceil","disabled","faAngleDoubleLeft","faChevronLeft","buttons","i","push","renderPageNos","faChevronRight","faAngleDoubleRight","UserEditModal","isOpen","onClose","onSubmit","onCloseModal","open","center","event","checkValidity","preventDefault","formData","FormData","dataObj","entries","value","htmlFor","name","defaultValue","required","email","selected","hidden","role","User","useState","list","setList","filteredList","setFilteredList","currentPageData","setCurrentPageData","setCurrentPage","editUserData","setEditUserData","addUserData","setAddUserData","searchText","setSearchText","setSelectedRecords","setSelectAll","sortKey","setSortKey","sortOrder","setSortOrder","filterData","filter","toLowerCase","indexOf","useEffect","mounted","axios","get","then","items","sortedData","sort","item1","item2","startIndex","endIndex","slice","placeholder","length","deleteItem","afterDeleteList","editItem","Object","records","console","log","pageNo","editIndex","findIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b35b83b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n//table component\r\nexport default function Table(props) {\r\n  //props passed to this component\r\n  const {\r\n    data,\r\n    keys,\r\n    columns,\r\n    onDelete,\r\n    onEdit,\r\n    onRecordSelectionChange,\r\n    onSelectAllChange,\r\n    selectedRecords,\r\n    selectAll,\r\n    onSort,\r\n  } = props;\r\n  // rener Table Header\r\n  function renderHeaders() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th className=\"checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={selectAll}\r\n              onChange={(e) => onSelectAllChange(e.target.checked)}\r\n            />\r\n          </th>\r\n          {columns.map((column, index) => (\r\n            <th\r\n              key={column}\r\n              className={column}\r\n              onClick={() => onSort(keys[index])}\r\n            >\r\n              {column}\r\n            </th>\r\n          ))}\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n\r\n  //function to render row\r\n  function renderRow(rowData) {\r\n    return (\r\n      <tr\r\n        key={rowData.id}\r\n        className={selectedRecords[rowData.id] ? \"row-selected row\" : \"row\"}\r\n      >\r\n        <td className=\"checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={selectedRecords[rowData.id] || false}\r\n            onChange={(e) =>\r\n              onRecordSelectionChange(rowData.id, e.target.checked)\r\n            }\r\n          />\r\n        </td>\r\n\r\n        {keys.map((key) => (\r\n          <td className={key} key={rowData[key]}>\r\n            {rowData[key]}\r\n          </td>\r\n        ))}\r\n        <td>\r\n          <button\r\n            onClick={() => onEdit(rowData)}\r\n            className=\"action-btn edit-btn\"\r\n          >\r\n            <FontAwesomeIcon icon={faPencilAlt} />\r\n          </button>\r\n          <button\r\n            onClick={() => onDelete(rowData)}\r\n            className=\"action-btn delete-btn\"\r\n          >\r\n            <FontAwesomeIcon icon={faTrashAlt} />\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  //render table component\r\n  return (\r\n    <>\r\n      <table>\r\n        {renderHeaders()}\r\n        <tbody>{data.map((item) => renderRow(item))}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {\r\n  faChevronLeft,\r\n  faChevronRight,\r\n  faAngleDoubleLeft,\r\n  faAngleDoubleRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//pagination component\r\nexport default function Pagination(props) {\r\n  //props passed to this component\r\n  const { total, perPageRecords, onPageChange, currentPage } = props;\r\n  //logic to calculate no of pages\r\n  const noOfPages = Math.ceil(total / perPageRecords);\r\n\r\n  //render page no buttons\r\n  function renderPageNos() {\r\n    let buttons = [];\r\n    for (let i = 1; i < noOfPages + 1; i++) {\r\n      buttons.push(\r\n        <button\r\n          key={i}\r\n          onClick={() => onPageChange(i)}\r\n          className={\r\n            currentPage === i\r\n              ? \"pagination-button current-pagination-button\"\r\n              : \"pagination-button\"\r\n          }\r\n        >\r\n          {i}\r\n        </button>\r\n      );\r\n    }\r\n    return buttons;\r\n  }\r\n  //render pagination component\r\n  return (\r\n    <div className=\"pagination\">\r\n      <button\r\n        onClick={() => onPageChange(1)}\r\n        disabled={currentPage === 1}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleDoubleLeft} />\r\n      </button>\r\n      <button\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faChevronLeft} />\r\n      </button>\r\n      {renderPageNos()}\r\n      <button\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === noOfPages}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faChevronRight} />\r\n      </button>\r\n      <button\r\n        onClick={() => onPageChange(noOfPages)}\r\n        disabled={currentPage === noOfPages}\r\n        className=\"pagination-button\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleDoubleRight} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport \"./../UserAddModal/style.css\";\r\nexport default function UserEditModal(props) {\r\n  //props passed to this component\r\n  const { isOpen, onClose, onSubmit, data = {} } = props;\r\n  //after close function\r\n  function onCloseModal() {\r\n    onClose();\r\n  }\r\n  //on form submit update user details\r\n  const submit = (event) => {\r\n    if (!event.target.checkValidity()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const formData = new FormData(event.target);\r\n    const dataObj = { ...data };\r\n    for (let [key, value] of formData.entries()) {\r\n      dataObj[key] = value;\r\n    }\r\n    onSubmit(dataObj);\r\n    onCloseModal();\r\n  };\r\n\r\n  // render edit user form modal\r\n  return (\r\n    <Modal open={isOpen} onClose={onCloseModal} center>\r\n      <h2>Edit User</h2>\r\n      <form onSubmit={submit}>\r\n        <div className=\"form-field\">\r\n          <label htmlFor=\"name\" className=\"field-label\">Name</label>\r\n          <input\r\n            name=\"name\"\r\n            id=\"name\"\r\n            type=\"text\"\r\n            defaultValue={data?.name}\r\n            required\r\n            className=\"form-field-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-field\">\r\n          <label htmlFor=\"email\" className=\"field-label\">Email</label>\r\n          <input\r\n            name=\"email\"\r\n            id=\"email\"\r\n            type=\"text\"\r\n            defaultValue={data?.email}\r\n            required\r\n            className=\"form-field-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-field\">\r\n          <label htmlFor=\"role\" className=\"field-label\">Role</label>\r\n          <select name=\"role\" id=\"role\" className=\"form-field-input\">\r\n            <option value=\"none\" selected disabled hidden>\r\n              Select an Option\r\n            </option>\r\n\r\n            <option\r\n              value=\"admin\"\r\n              selected={data?.role === \"admin\" ? \"selected\" : \"\"}\r\n            >\r\n              admin\r\n            </option>\r\n            <option\r\n              value=\"member\"\r\n              selected={data?.role === \"member\" ? \"selected\" : \"\"}\r\n            >\r\n              member\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n","import \"react-responsive-modal/styles.css\";\r\nimport \"./style.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nexport default function UserEditModal(props) {\r\n  //props passed to this component\r\n  const { isOpen, onClose, onSubmit } = props;\r\n  //after close function\r\n  function onCloseModal() {\r\n    onClose();\r\n  }\r\n  //on form submit update user details\r\n  const submit = (event) => {\r\n    if (!event.target.checkValidity()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const formData = new FormData(event.target);\r\n    const dataObj = {};\r\n    for (let [key, value] of formData.entries()) {\r\n      dataObj[key] = value;\r\n    }\r\n    onSubmit(dataObj);\r\n    onCloseModal();\r\n  };\r\n\r\n  // render add user form modal\r\n  return (\r\n    <Modal open={isOpen} onClose={onCloseModal} center>\r\n      <h2>Add User</h2>\r\n      <form onSubmit={submit}>\r\n        <div className=\"form-field\">\r\n          <label className=\"field-label\" htmlFor=\"name\">Name</label>\r\n          <input name=\"name\" id=\"name\" type=\"text\" required className=\"form-field-input\"/>\r\n        </div>\r\n        <div className=\"form-field\">\r\n          <label className=\"field-label\" htmlFor=\"email\">Email</label>\r\n          <input name=\"email\" id=\"email\" type=\"text\" required className=\"form-field-input\"/>\r\n        </div>\r\n        <div className=\"form-field\">\r\n          <label className=\"field-label\" htmlFor=\"role\">Role</label>\r\n          <select name=\"role\" id=\"role\" className=\"form-field-input\">\r\n            <option value=\"none\" selected disabled hidden>\r\n              Select an Option\r\n            </option>\r\n\r\n            <option value=\"admin\" selected>\r\n              admin\r\n            </option>\r\n            <option value=\"member\">member</option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getUserList } from \"./../../api/getUserList\";\r\nimport Table from \"./../../components/Table\";\r\nimport Pagination from \"./../../components/Pagination\";\r\nimport UserEditModal from \"./../../components/UserEditModal\";\r\nimport UserAddModal from \"./../../components/UserAddModal\";\r\nimport \"./style.css\";\r\n// user component\r\nexport default function User() {\r\n  // state values\r\n  const [list, setList] = useState([]);\r\n  const [filteredList, setFilteredList] = useState([]);\r\n  const [currentPageData, setCurrentPageData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [editUserData, setEditUserData] = useState(null);\r\n  const [addUserData, setAddUserData] = useState(null);\r\n\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [selectedRecords, setSelectedRecords] = useState({});\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  const [sortKey, setSortKey] = useState(\"\");\r\n  const [sortOrder, setSortOrder] = useState(\"\");\r\n\r\n  //component variables\r\n  const columns = [\"Name\", \"Email\", \"Role\"];\r\n  const keys = [\"name\", \"email\", \"role\"];\r\n  const perPageRecords = 10;\r\n  // hook - useefect - get user data on component load\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    getUserList().then((items) => {\r\n      if (mounted) {\r\n        setList(items.data);\r\n        setFilteredList([...items.data]);\r\n      }\r\n    });\r\n    return () => (mounted = false);\r\n  }, []);\r\n\r\n  // hook - use effect -  get filter data n list value change\r\n  useEffect(() => {\r\n    if (list) {\r\n      filterData();\r\n    }\r\n  }, [list]);\r\n  // sort functionality handling\r\n  useEffect(() => {\r\n    if (!sortKey) {\r\n      filterData();\r\n      return;\r\n    }\r\n    let sortedData;\r\n    if (sortOrder === \"desc\") {\r\n      sortedData = [...filteredList].sort((item1, item2) =>\r\n        item1[sortKey] < item2[sortKey] ? 1 : -1\r\n      );\r\n    } else {\r\n      sortedData = [...filteredList].sort((item1, item2) =>\r\n        item1[sortKey] < item2[sortKey] ? -1 : 1\r\n      );\r\n    }\r\n    setFilteredList(sortedData);\r\n  }, [sortKey, sortOrder]);\r\n\r\n  // hook - use effect -  get current page data on page change\r\n  useEffect(() => {\r\n    const startIndex = (currentPage - 1) * perPageRecords;\r\n    const endIndex = startIndex + perPageRecords;\r\n    const currentPageData = filteredList.slice(startIndex, endIndex);\r\n    setCurrentPageData(currentPageData);\r\n    setSelectAll(false);\r\n    setSelectedRecords({});\r\n  }, [currentPage, filteredList]);\r\n\r\n  // filter data based on user input\r\n  function filterData(searchText = \"\") {\r\n    setSearchText(searchText);\r\n    const filteredList = list.filter(function (item) {\r\n      for (var key in item) {\r\n        if (item[key].toLowerCase().indexOf(searchText.toLowerCase()) > -1)\r\n          return item;\r\n      }\r\n    });\r\n    setFilteredList(filteredList);\r\n    setCurrentPage(1);\r\n  }\r\n\r\n  // on page change from pagination\r\n  function onPageChange(pageNo) {\r\n    setCurrentPage(pageNo);\r\n  }\r\n\r\n  // handle delete individual user\r\n  function onDelete(deleteItem) {\r\n    const afterDeleteList = list.filter((item) => item.id !== deleteItem.id);\r\n    setList(afterDeleteList);\r\n    if (currentPageData.length === 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  }\r\n\r\n  //on edit user click\r\n  function onEdit(editItem) {\r\n    setEditUserData(editItem);\r\n  }\r\n\r\n  // save updated user details\r\n  function updateUser(data) {\r\n    const editIndex = list.findIndex((item) => item.id === data.id);\r\n    list[editIndex] = data;\r\n    setList(list);\r\n    filterData(searchText);\r\n  }\r\n  // save add user details\r\n  function addUser(data) {\r\n    setList([...list, data]);\r\n    filterData(searchText);\r\n  }\r\n\r\n  //detele multiple users\r\n  function deleteUsers() {\r\n    const afterDeleteList = list.filter((item) => !selectedRecords[item.id]);\r\n    setList(afterDeleteList);\r\n    setSelectedRecords({});\r\n    if (Object.keys(selectedRecords).length === currentPageData.length) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n    setSelectAll(false);\r\n  }\r\n\r\n  //handle select all selection change\r\n  function onSelectAllChange(checked) {\r\n    const records = {};\r\n    if (checked) {\r\n      for (let item of currentPageData) {\r\n        records[item.id] = checked;\r\n      }\r\n    }\r\n    setSelectedRecords(records);\r\n\r\n    setSelectAll(checked);\r\n  }\r\n\r\n  // handle row selection change\r\n  function onRecordSelectionChange(id, checked) {\r\n    if (checked) {\r\n      selectedRecords[id] = checked;\r\n    } else {\r\n      delete selectedRecords[id];\r\n    }\r\n    setSelectedRecords({ ...selectedRecords });\r\n    setSelectAll(\r\n      Object.keys(selectedRecords).length === currentPageData.length\r\n    );\r\n  }\r\n\r\n  //render loading while api call is going on\r\n  if (list === null) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n  function onSort(key) {\r\n    if (sortOrder === \"desc\" && key === sortKey) {\r\n      setSortOrder(\"\");\r\n      setSortKey(\"\");\r\n    } else if (sortKey === key) {\r\n      setSortOrder(\"desc\");\r\n    } else {\r\n      setSortKey(key);\r\n      setSortOrder(\"asc\");\r\n    }\r\n    console.log(sortKey, sortOrder);\r\n  }\r\n\r\n  // render user component\r\n  return (\r\n    <>\r\n      <h2>User List</h2>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => filterData(e.target.value)}\r\n        placeholder=\"Search by Name, Email or Role\"\r\n        className=\"search-text-box\"\r\n      />\r\n      {list.length === 0 || filteredList.length === 0 ? (\r\n        <div>No Data</div>\r\n      ) : (\r\n        <>\r\n          <Table\r\n            data={currentPageData}\r\n            columns={columns}\r\n            keys={keys}\r\n            onDelete={onDelete}\r\n            onEdit={onEdit}\r\n            onRecordSelectionChange={onRecordSelectionChange}\r\n            onSelectAllChange={onSelectAllChange}\r\n            selectedRecords={selectedRecords}\r\n            selectAll={selectAll}\r\n            onSort={onSort}\r\n          />\r\n          <Pagination\r\n            perPageRecords={perPageRecords}\r\n            total={filteredList.length}\r\n            onPageChange={onPageChange}\r\n            currentPage={currentPage}\r\n          />\r\n          <UserEditModal\r\n            isOpen={!!editUserData}\r\n            onClose={() => setEditUserData(false)}\r\n            onSubmit={updateUser}\r\n            data={editUserData}\r\n          />\r\n          <UserAddModal\r\n            isOpen={!!addUserData}\r\n            onClose={() => setAddUserData(false)}\r\n            onSubmit={addUser}\r\n          />\r\n\r\n          {Object.keys(selectedRecords).length ? (\r\n            <button onClick={deleteUsers} className=\"delete-selected-btn\">\r\n              Delete Selected\r\n            </button>\r\n          ) : null}\r\n          <button\r\n            onClick={() => setAddUserData(true)}\r\n            className=\"add-selected-btn\"\r\n          >\r\n            Add User\r\n          </button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n//api call to get user list\r\nexport function getUserList() {\r\n  return axios\r\n    .get(\r\n      \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\"\r\n    )\r\n    .then((data) => data);\r\n}\r\n","import User from \"./pages/user\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <User />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}